#!/usr/bin/env python3
"""
Test the ExploitDB version checking fix for float/int version numbers
"""

from src.integrations.columns.vulnerability_dbs.column_u_v_exploit_db import ExploitDBProcessor

def test_version_checking():
    """Test version checking with different types"""
    print("üîç Testing ExploitDB Version Checking Fix")
    print("=" * 60)
    
    # Create instance
    column = ExploitDBProcessor({})
    
    # Test cases with different version types
    test_cases = [
        # (version, type_description)
        ("3.9.0", "string version"),
        (3.9, "float version"),
        (3, "int version"),
        ("2.7.18", "semantic string version"),
        (2.7, "float with decimal"),
        (10, "large int version"),
    ]
    
    # Mock vulnerability for testing
    class MockVulnerability:
        def __init__(self, description):
            self.description = description
            self.affected_versions = ["< 4.0", "> 2.0"]
    
    print("\nüìã Testing _is_exploit_version_specific:")
    for version, desc in test_cases:
        print(f"\n  Testing {desc}: {version} (type: {type(version).__name__})")
        
        try:
            # Test with vulnerability that mentions the version
            vuln = MockVulnerability(f"Exploit for version {version} vulnerability")
            result = column._is_exploit_version_specific(vuln, version)
            print(f"  ‚úÖ No error - Result: {result}")
            
        except Exception as e:
            print(f"  ‚ùå Error: {e}")
    
    print("\nüìã Testing _version_in_exploit_range:")
    for version, desc in test_cases:
        print(f"\n  Testing {desc}: {version} (type: {type(version).__name__})")
        
        try:
            # Test with different range specifications
            ranges = ["< 5.0", "> 1.0", "== 3.0"]
            for range_spec in ranges:
                result = column._version_in_exploit_range(version, range_spec)
                print(f"    Range '{range_spec}': {result}")
                
        except Exception as e:
            print(f"  ‚ùå Error with range checking: {e}")
    
    print("\n‚úÖ Test completed - version checking should now handle float/int versions")

if __name__ == "__main__":
    test_version_checking()